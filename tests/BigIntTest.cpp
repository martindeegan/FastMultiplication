#define BOOST_TEST_MODULE BigIntTest

#include <sstream>

#include <boost/test/unit_test.hpp>

#include "BigInt.hpp"

BOOST_AUTO_TEST_CASE(ConstructorTestCase1) {
  BigInt i;
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase2) {
  std::string int_string = "00012300123";
  BigInt i(int_string);
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "12300123");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase3) {
  std::string int_string = "";
  BigInt i(int_string);
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase4) {
  BigInt i("00012300123");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "12300123");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase5) {
  BigInt i("");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase6) {
  std::string int_string = "1234567890";
  BigInt i(int_string);
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "1234567890");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase7) {
  BigInt i("1234567890");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "1234567890");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase8) {
  BigInt i("0");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase9) {
  std::string int_string = "0";
  BigInt i(int_string);
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(OperatorEqualTest1) {
  BigInt i("1234567890");
  BigInt j("1234567890");
  BOOST_CHECK_EQUAL(i, j);
}

BOOST_AUTO_TEST_CASE(OperatorEqualTest2) {
  BigInt i("");
  BigInt j("0");
  BOOST_CHECK_EQUAL(i, j);
}

BOOST_AUTO_TEST_CASE(OperatorEqualTest3) {
  BigInt i;
  BigInt j("0");
  BOOST_CHECK_EQUAL(i, j);
}

BOOST_AUTO_TEST_CASE(OperatorEqualTest4) {
  BigInt i("1234567890");
  BigInt j("1234657890");
  BOOST_CHECK_NE(i, j);
}

BOOST_AUTO_TEST_CASE(AdditionTest1) {
  BigInt i("1");
  BigInt j("1");
  BigInt k("2");
  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);
}

BOOST_AUTO_TEST_CASE(AdditionTest2) {
  BigInt i;
  BigInt j("0");
  BigInt k("0");
  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);
}

BOOST_AUTO_TEST_CASE(AdditionTest3) {
  BigInt i("1606938044258990275541962092341162602522202993782792835301375");
  BigInt j("3213876088517980551083924184682325205044405987565585670602751");
  BigInt k("4820814132776970826625886277023487807566608981348378505904126");
  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);
}

BOOST_AUTO_TEST_CASE(AdditionTest4) {
  BigInt i("3540136494495259314262794429906420535804323707653078071282949985511"
           "2264074763459727108433339379533050058716424314098854037388858186359"
           "0044622404991728906599366400005917176740377601943975293629949119408"
           "5989034692985681972612630897874970277125087512881147941034334262308"
           "7234071707063104453419553593076466214251769787178894101570218284076"
           "6509295270854651459881610586893475184126853183587780497947092464128"
           "387019611820640300001");
  BigInt j("3636029179586993684238526707954331911802338502600162304034603583258"
           "0600191583895484198508262979388783308179702534403855752855931517013"
           "0661429924309165620257800217712478476434501253428365658132099725903"
           "71590152578728008385990139795377610001");
  BigInt k("3540136494495259314262794429906420535804323707653078071282949985511"
           "2264074763459727108433339379533050058716424314098854037388858186359"
           "0044622404991728906599366400005917176740377601944011653921744989345"
           "4412887363781115163792864748134986507528547871206953942950173217150"
           "7084898005001982784237523846516851789537362938880200715869461375732"
           "8535075292625899307525060712236311749940063156178152088099671192136"
           "773009751616017910002");
  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);
}

BOOST_AUTO_TEST_CASE(AdditionTest5) {
  BigInt i;
  BigInt j("3213876088517980551083924184682325205044405987565585670602751");
  BigInt k("3213876088517980551083924184682325205044405987565585670602751");
  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);
}
