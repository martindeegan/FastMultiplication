#define BOOST_TEST_MODULE BigIntTest

#include <sstream>

#include <boost/test/unit_test.hpp>

#include "BigInt.hpp"

BOOST_AUTO_TEST_CASE(ConstructorTestCase1) {
  BigInt i;
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase2) {
  std::string int_string = "00012300123";
  BigInt i(int_string);
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "12300123");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase3) {
  std::string int_string = "";
  BigInt i(int_string);
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase4) {
  BigInt i("00012300123");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "12300123");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase5) {
  BigInt i("");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase6) {
  std::string int_string = "1234567890";
  BigInt i(int_string);
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "1234567890");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase7) {
  BigInt i("1234567890");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "1234567890");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase8) {
  BigInt i("0");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase9) {
  std::string int_string = "0";
  BigInt i(int_string);
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase10) {
  std::string int_string = "-00000000000000000000001231231";
  BigInt i(int_string);
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "-1231231");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase11) {
  std::string int_string = "-0000000000000000000000";
  BigInt i(int_string);
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase12) {
  BigInt i("-00000000000000000000001231231");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "-1231231");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase13) {
  BigInt i("-0000000000000000000000");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "0");
}

BOOST_AUTO_TEST_CASE(ConstructorTestCase14) {
  BigInt i(" da  -    0000000000000000000000232");
  std::stringstream ss;
  ss << i;
  BOOST_CHECK_EQUAL(ss.str(), "-232");
}

BOOST_AUTO_TEST_CASE(OperatorEqualTest1) {
  BigInt i("1234567890");
  BigInt j("1234567890");
  BOOST_CHECK_EQUAL(i, j);
}

BOOST_AUTO_TEST_CASE(OperatorEqualTest2) {
  BigInt i("");
  BigInt j("0");
  BOOST_CHECK_EQUAL(i, j);
}

BOOST_AUTO_TEST_CASE(OperatorEqualTest3) {
  BigInt i;
  BigInt j("0");
  BOOST_CHECK_EQUAL(i, j);
}

BOOST_AUTO_TEST_CASE(OperatorEqualTest4) {
  BigInt i("1234567890");
  BigInt j("1234657890");
  BOOST_CHECK_NE(i, j);
}

BOOST_AUTO_TEST_CASE(ComparisonOperatorTest1) {
  BigInt i("1234567890");
  BigInt j("1234567891");
  BOOST_CHECK_LT(i, j);
  BOOST_CHECK_GT(j, i);
  BOOST_CHECK_LE(i, j);
  BOOST_CHECK_GE(j, i);
}

BOOST_AUTO_TEST_CASE(ComparisonOperatorTest2) {
  BigInt i("1234567890");
  BigInt j("-1234567891");
  BOOST_CHECK_LT(j, i);
  BOOST_CHECK_GT(i, j);
  BOOST_CHECK_LE(j, i);
  BOOST_CHECK_GE(i, j);
}

BOOST_AUTO_TEST_CASE(ComparisonOperatorTest3) {
  BigInt i("-0");
  BigInt j;
  BOOST_CHECK_LE(i, j);
  BOOST_CHECK_GE(i, j);
  BOOST_CHECK_LE(j, i);
  BOOST_CHECK_GE(i, i);
}

BOOST_AUTO_TEST_CASE(ComparisonOperatorTest4) {
  BigInt i("123");
  BigInt j("1231234");
  BOOST_CHECK_LE(i, j);
  BOOST_CHECK_GE(j, i);
  BOOST_CHECK_GE(i, i);
}

BOOST_AUTO_TEST_CASE(ComparisonOperatorTest5) {
  BigInt i("-1234123");
  BigInt j("-123");
  BOOST_CHECK_LT(i, j);
  BOOST_CHECK_GT(j, i);
  BOOST_CHECK_LE(i, j);
  BOOST_CHECK_GE(j, i);
}

BOOST_AUTO_TEST_CASE(ComparisonOperatorTest6) {
  BigInt i("-983212");
  BigInt j("-123123");
  BOOST_CHECK_LT(i, j);
  BOOST_CHECK_GT(j, i);
  BOOST_CHECK_LE(i, j);
  BOOST_CHECK_GE(j, i);
}

BOOST_AUTO_TEST_CASE(AdditionTest1) {
  BigInt i("1");
  BigInt j("1");
  BigInt k("2");
  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);
}

BOOST_AUTO_TEST_CASE(AdditionTest2) {
  BigInt i;
  BigInt j("0");
  BigInt k("0");
  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);
}

BOOST_AUTO_TEST_CASE(AdditionTest3) {
  BigInt i("1606938044258990275541962092341162602522202993782792835301375");
  BigInt j("3213876088517980551083924184682325205044405987565585670602751");
  BigInt k("4820814132776970826625886277023487807566608981348378505904126");
  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);
}

BOOST_AUTO_TEST_CASE(AdditionTest4) {
  BigInt i("3540136494495259314262794429906420535804323707653078071282949985511"
           "2264074763459727108433339379533050058716424314098854037388858186359"
           "0044622404991728906599366400005917176740377601943975293629949119408"
           "5989034692985681972612630897874970277125087512881147941034334262308"
           "7234071707063104453419553593076466214251769787178894101570218284076"
           "6509295270854651459881610586893475184126853183587780497947092464128"
           "387019611820640300001");
  BigInt j("3636029179586993684238526707954331911802338502600162304034603583258"
           "0600191583895484198508262979388783308179702534403855752855931517013"
           "0661429924309165620257800217712478476434501253428365658132099725903"
           "71590152578728008385990139795377610001");
  BigInt k("3540136494495259314262794429906420535804323707653078071282949985511"
           "2264074763459727108433339379533050058716424314098854037388858186359"
           "0044622404991728906599366400005917176740377601944011653921744989345"
           "4412887363781115163792864748134986507528547871206953942950173217150"
           "7084898005001982784237523846516851789537362938880200715869461375732"
           "8535075292625899307525060712236311749940063156178152088099671192136"
           "773009751616017910002");
  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);
}

BOOST_AUTO_TEST_CASE(AdditionTest5) {
  BigInt i;
  BigInt j("3213876088517980551083924184682325205044405987565585670602751");
  BigInt k("3213876088517980551083924184682325205044405987565585670602751");
  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);
}

BOOST_AUTO_TEST_CASE(AdditionTest6) {
  BigInt i = 123123;
  BigInt j = 231232;
  BOOST_CHECK_EQUAL(i + j, 123123 + 231232);
  BOOST_CHECK_EQUAL(j + -i, 231232 - 123123);
  BOOST_CHECK_EQUAL(i - i, 123123 - 123123);
  BOOST_CHECK_EQUAL(j - j, 231232 - 231232);
}

BOOST_AUTO_TEST_CASE(InPlaceAdditionTest1) {
  BigInt i;
  BigInt j("3213876088517980551083924184682325205044405987565585670602751");
  BigInt k("3213876088517980551083924184682325205044405987565585670602751");
  i += j;
  BOOST_CHECK_EQUAL(i, k);

  i = BigInt();
  j += i;
  BOOST_CHECK_EQUAL(j, k);
}

BOOST_AUTO_TEST_CASE(InPlaceAdditionTest2) {
  BigInt i("3540136494495259314262794429906420535804323707653078071282949985511"
           "2264074763459727108433339379533050058716424314098854037388858186359"
           "0044622404991728906599366400005917176740377601943975293629949119408"
           "5989034692985681972612630897874970277125087512881147941034334262308"
           "7234071707063104453419553593076466214251769787178894101570218284076"
           "6509295270854651459881610586893475184126853183587780497947092464128"
           "387019611820640300001");
  BigInt j("3636029179586993684238526707954331911802338502600162304034603583258"
           "0600191583895484198508262979388783308179702534403855752855931517013"
           "0661429924309165620257800217712478476434501253428365658132099725903"
           "71590152578728008385990139795377610001");
  BigInt k("3540136494495259314262794429906420535804323707653078071282949985511"
           "2264074763459727108433339379533050058716424314098854037388858186359"
           "0044622404991728906599366400005917176740377601944011653921744989345"
           "4412887363781115163792864748134986507528547871206953942950173217150"
           "7084898005001982784237523846516851789537362938880200715869461375732"
           "8535075292625899307525060712236311749940063156178152088099671192136"
           "773009751616017910002");

  BOOST_CHECK_EQUAL(i + j, k);
  BOOST_CHECK_EQUAL(j + i, k);

  BigInt i2 = i;
  i2 += j;
  BOOST_CHECK_EQUAL(i2, k);

  j += i;
  BOOST_CHECK_EQUAL(j, k);
}

BOOST_AUTO_TEST_CASE(NegationTest1) {
  BigInt j("3213876088517980551083924184682325205044405987565585670602751");
  BigInt k("-3213876088517980551083924184682325205044405987565585670602751");
  BOOST_CHECK_EQUAL(-j, k);
  BOOST_CHECK_EQUAL(j, -k);
}

BOOST_AUTO_TEST_CASE(NegationTest2) {
  BigInt j("0");
  BigInt k("-0");
  BOOST_CHECK_EQUAL(-j, k);
  BOOST_CHECK_EQUAL(j, -k);
  BOOST_CHECK_EQUAL(j, k);
}

BOOST_AUTO_TEST_CASE(NegationTest3) {
  BigInt j("3213876088517980551083924184682325205044405987565585670602751");
  BigInt k("-3213876088517980551083924184682325205044405987565585670602751");
  BOOST_CHECK_EQUAL(-j, k);
  BOOST_CHECK_EQUAL(j, -k);
}

BOOST_AUTO_TEST_CASE(SubtractionTest1) {
  BigInt i("1");
  BigInt j("1");
  BOOST_CHECK_EQUAL(i - j, 0);
  BOOST_CHECK_EQUAL(j - i, 0);
}

BOOST_AUTO_TEST_CASE(SubtractionTest2) {
  BigInt i("0");
  BigInt j("20");
  BOOST_CHECK_EQUAL(i - j, -20);
  BOOST_CHECK_EQUAL(j - i, 20);
}

BOOST_AUTO_TEST_CASE(SubtractionTest3) {
  BigInt i("763287462834");
  BigInt j("12938472813479");
  BigInt k("-12175185350645");
  BOOST_CHECK_EQUAL(i - j, k);
  BOOST_CHECK_EQUAL(j - i, -k);
}

BOOST_AUTO_TEST_CASE(SubtractionTest4) {
  BigInt i("3841907248097123894709817630481029386518239472034012938568349872893"
           "741298346138467129837401293874091823749081723094781");
  BigInt j("0918237490812739048712093847091827309487102983740987123094790283749"
           "18031328427394");
  BigInt k("3841907248097123894709817630481029386426415722952739033697140488184"
           "558567397428168755738688984395063448831050394667387");
  BOOST_CHECK_EQUAL(i - j, k);
  BOOST_CHECK_EQUAL(j - i, -k);
}

BOOST_AUTO_TEST_CASE(SubtractionTest5) {
  BigInt i("3636029179586993684238526707954331911802338502600162304034603583258"
           "0600191583895484198508262979388783308179702534403855752855931517013"
           "0661429924309165620257800217712478476434501253428365658132099725903"
           "71590152578728008385990139795377610001");
  BigInt j("3540136494495259314262794429906420535804323707653078071282949985511"
           "2264074763459727108433339379533050058716424314098854037388858186359"
           "0044622404991728906599366400005917176740377601943975293629949119408"
           "5989034692985681972612630897874970277125087512881147941034334262308"
           "7234071707063104453419553593076466214251769787178894101570218284076"
           "6509295270854651459881610586893475184126853183587780497947092464128"
           "387019611820640300001");
  BigInt k("-354013649449525931426279442990642053580432370765307807128294998551"
           "1226407476345972710843333937953305005871642431409885403738885818635"
           "9004462240499172890659936640000591717674037760194393893333815324947"
           "1756518202219024878143239704761495404672162715455534193911849530746"
           "6738324540912422612260158333963608063896617663547758748727097519242"
           "0448351524908340361223816046155063861831364321099740890779451373612"
           "0001029472025262690000");
  BigInt l("-354013649449525931426279442990642053580432370765307807128294998551"
           "1226407476345972710843333937953305005871642431409885403738885818635"
           "9004462240499172890659936640000591717674037760194401165392174498934"
           "5441288736378111516379286474813498650752854787120695394295017321715"
           "0708489800500198278423752384651685178953736293888020071586946137573"
           "2853507529262589930752506071223631174994006315617815208809967119213"
           "6773009751616017910002");

  BOOST_CHECK_EQUAL(i - j, k);
  BOOST_CHECK_EQUAL(j - i, -k);
  BOOST_CHECK_EQUAL(-i + -j, l);
}
